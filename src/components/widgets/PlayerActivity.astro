---
import type { PlayerActivityStats, PlayerResponse } from "../../lib/api"
import Widget from "../Widget.astro"
import { Tooltip } from "../ui/Tooltip"

interface Props {
  player: PlayerResponse
  activity: PlayerActivityStats
}

const { player, activity } = Astro.props

function getWinrateClass(winrate: number) {
  if (winrate >= 0.65) return "bg-green-500"
  if (winrate > 0.5) return "bg-lime-500"
  if (winrate >= 0.45) return "bg-yellow-500"
  if (winrate > 0) return "bg-orange-500"
  return "bg-red-500"
}

function getDaySize(dayMatches: number, medianMatches: number) {
  if (dayMatches === 0 || medianMatches == 0) return 0

  const minSize = 50
  const maxSize = 100
  const size = (dayMatches / medianMatches) * 100

  return Math.max(minSize, Math.min(size, maxSize))
}

const maxMatches = Math.max(...activity.history.map((d) => d.matches))
type Day = { date: Date; win_rate: number; games_count: number; size: number; tooltip: string }
type Week = Day[]
const today = new Date()
// get the date of monday 12 weeks ago, fully including this week
const start = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay() - 11 * 7)
const weeks: Week[] = []
for (let i = 0; i < 12; i++) {
  const week: Week = []
  for (let j = 0; j < 7; j++) {
    const date = new Date(start.getFullYear(), start.getMonth(), start.getDate() + i * 7 + j)
    if (date > today) break
    const day = activity.history.find((d) => d.date === date.toISOString().slice(0, 10))
    week.push({
      date,
      win_rate: (day?.win_rate ?? 0) / 100,
      games_count: day?.matches ?? 0,
      size: getDaySize(day?.matches ?? 0, activity.aggregated?.matches_per_day?.median ?? 0),
      tooltip: day?.matches
        ? `${date.toLocaleDateString("en", { dateStyle: "long" })}\n${day.matches} Games\n${Math.round(
            day.win_rate
          )}% Win rate`
        : "No games",
    })
  }
  weeks.push(week)
}
function formatMonth(date: Date) {
  if (!date) return ""
  return date.getDate() <= 7 ? date.toLocaleString("en", { month: "short" }) : ""
}
---

<Widget title="Activity" label={`${activity.aggregated?.matches ?? 0} Matches`}>
  <div class="flex flex-row justify-center gap-1">
    {
      weeks.map((week, x) => (
        <div class="flex flex-col gap-1">
          {week.map((day, y) => {
            const { size, win_rate, games_count, tooltip } = day
            return games_count == 0 ? (
              <div class="h-4 w-4 rounded-sm bg-gray-800/50" />
            ) : (
              <Tooltip content={tooltip} client:idle>
                <div class="relative flex h-4 w-4 items-center justify-center">
                  <div
                    class:list={[" rounded-sm", getWinrateClass(win_rate)]}
                    style={`width: ${size}%; height: ${size}%;`}
                  />
                </div>
              </Tooltip>
            )
          })}
          <div class="relative h-4 text-xs text-gray-400">
            <span class="absolute top-0">{formatMonth(week[6]?.date)}</span>
          </div>
        </div>
      ))
    }
  </div>
</Widget>
